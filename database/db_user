# from sqlalchemy.orm import Session
# from database.hash import Hash
# from schemas import UserBase
# from database.models import DbUser
# import logging  # noqa: F401
# from fastapi import HTTPException

# logger = logging.getLogger(__name__)

# def create_user(db: Session, request: UserBase):
#     # sourcery skip: extract-method, use-named-expression
#     try:
#         existing_user = db.query(DbUser).filter(DbUser.username == request.username).first()
#         if existing_user:
#             raise HTTPException(status_code=400, detail="Username already taken")

#         new_user = DbUser(
#             username=request.username,
#             email=request.email,
#             password=Hash.bcrypt(request.password)
#         )
#         db.add(new_user)
#         db.commit()
#         db.refresh(new_user)
#         return new_user
#         # Return UserDisplay without the password
#         # return UserDisplay(
#         #     user_id=new_user.user_id,
#         #     username=new_user.username,
#         #     email=new_user.email
#             # Do NOT include password for security reasons  
        
#     except Exception as e:
#         db.rollback()
#         logger.error(f"Error creating user: {e}")
#         raise HTTPException(status_code=500, detail="Internal server error") from e
    
# def get_all_users(db: Session):
#     try:
#         users = db.query(DbUser).all()
#         return users
#     except Exception as e:
#         logger.error(f"Error getting all users: {e}")
#         raise HTTPException(status_code=500, detail="Internal server error") from e

# def get_user(db: Session, user_id: int):
#     user = db.query(DbUser).filter(DbUser.user_id == user_id).first()
#     if user is None:
#         raise HTTPException(status_code=404, detail=f"User with id {user_id} not found")
#     return user

# def update_user(db: Session, id: int, request: UserBase):
#     user_query = db.query(DbUser).filter(DbUser.user_id == id)
#     user = user_query.first()
#     if not user:
#         raise HTTPException(status_code=404, detail=f"User with id {id} not found")

#     try:
#         user_query.update({
#             DbUser.username: request.username,
#             DbUser.email: request.email,
#             DbUser.password: Hash.bcrypt(request.password)
#         })
#         db.commit()
#         updated_user = user_query.first()
#         return updated_user
#     except Exception as e:
#         db.rollback()
#         logger.error(f"Error updating user: {e}")
#         raise HTTPException(status_code=500, detail="Internal server error") from e
    
# def delete_user(db: Session, id: int):
#     user = db.query(DbUser).filter(DbUser.user_id == id).first()
#     if not user:
#         raise HTTPException(status_code=404, detail=f"User with id {id} not found")
    
#     try:
#         db.delete(user)
#         db.commit()
#         return "User deleted successfully"  # Return a success message
#     except Exception as e:
#         db.rollback()
#         logger.error(f"Error deleting user: {e}")
#         raise HTTPException(status_code=500, detail="Internal server error") from e